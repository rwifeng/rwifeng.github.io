<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rwifeng</title>
    <description>no dangers no wonders</description>
    <link>http://www.rwifeng.com/</link>
    <atom:link href="http://www.rwifeng.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>tcpflow 的简单应用</title>
        <description>&lt;p&gt;大家知道tcpdump 是一个很方便的抓包工具， 但是tcpdump是按照包为单位进行输出的，阅读起来不是很方便。  而tcpflow是面向tcp流的。 每个tcp传输会保存成一个文件，所以一个典型的tcp回话会产生两个文件，每个方向产生一个文件。 并且tcpflow还可以解析tcpdump保存的文件。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;安装&lt;/h3&gt;
&lt;p&gt;具体可以参考： https://github.com/simsong/tcpflow&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;简单使用&lt;/h3&gt;

&lt;p&gt;具体的使用方法，可以去查应用手册&lt;code&gt;man tcpflow&lt;/code&gt;. 下面介绍几种简单的使用方法。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;打印经过网卡的所有报文&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在你的terminal中输入:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
 tcpflow -ci en0
&lt;/code&gt;
其中 -c 表示将报文直接打印在terminal中。不指定 -c 参数会将抓取的tcp报文保存在文件中。
-i 表示你要监听的网络端口。 假如你不指定-c 参数， tcpflow会将每个tcp流的数据存储在他自己的文件中，其中文件的命名规则你可以参考: https://github.com/simsong/tcpflow . 基本格式为：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
  [timestampT]sourceip.sourceport-destip.destport[--VLAN][cNNNN]
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;读取已有的 pcap 文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在使用tcpdump， 或者 wireshark 抓得包的格式是&lt;code&gt;pcap&lt;/code&gt;。 使用tcpflow也可以读取这些包得格式。
这儿有一个我使用tcpdump 抓得包得格式： http://rwxf.qiniudn.com/test.pcap&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
tcpflow -cr test.pcap
&lt;/code&gt;
即可以将 pcap 包，打印到terminal中。当然你也可以将tcp流保存在文件中：&lt;/p&gt;

&lt;p&gt;```
tcpflow -c test.pcap&lt;/p&gt;

&lt;p&gt;这样我得到了两个文件：
	183.136.139.016.00080-192.168.199.146.49570
	192.168.199.146.49570-183.136.139.016.00080
 ```&lt;/p&gt;

&lt;p&gt;其中文件 &lt;code&gt;192.168.199.146.49570-183.136.139.016.00080&lt;/code&gt; 是我主机向服务器发送的请求包。文件 &lt;code&gt;183.136.139.016.00080-192.168.199.146.49570&lt;/code&gt;是服务器向客户端返回的响应包。如果你想要重放下请求，就可以使用这种方法。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
nc -i 1 183.136.139.16 80 &amp;lt; 192.168.199.146.49570-183.136.139.016.00080
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用表达式过滤抓包&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;tcpflow 也是支持表达式过滤的，格式和tcpdump一样，具体格式和对应参数你可以参考：http://linux.die.net/man/7/pcap-filter 。 这里列集中常用的表达式：&lt;/p&gt;

&lt;p&gt;```
过滤经过 192.168.1.202 的流量：
tcpflow -i any host 10.0.3.1&lt;/p&gt;

&lt;p&gt;过滤从主机 192.168.1.202 发出的流量：
tcpflow -i any src host 10.0.3.1&lt;/p&gt;

&lt;p&gt;过滤从主机 192.168.1.202 发出的流量并且端口号为 80：
tcpflow -i any src host 10.0.3.1 and port 80&lt;/p&gt;

&lt;p&gt;过滤固定端口的流量：
tcpflow -i en0 port 443 or port 80&lt;/p&gt;

&lt;p&gt;过滤主机 192.168.1.202 端口为80或443的流量：
tcpflow -i en0 ‘host 192.168.1.202 and (port 443 or port 80)’&lt;/p&gt;

&lt;p&gt;…
```&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Apr 2015 18:07:27 +0800</pubDate>
        <link>http://www.rwifeng.com/jekyll/update/2015/04/16/how-to-tcpflow/</link>
        <guid isPermaLink="true">http://www.rwifeng.com/jekyll/update/2015/04/16/how-to-tcpflow/</guid>
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 21 Jun 2014 20:07:27 +0800</pubDate>
        <link>http://www.rwifeng.com/jekyll/update/2014/06/21/welcome-to-jekyll/</link>
        <guid isPermaLink="true">http://www.rwifeng.com/jekyll/update/2014/06/21/welcome-to-jekyll/</guid>
      </item>
    
  </channel>
</rss>
