<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rwifeng</title>
    <description>no dangers no wonders</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>docker haproxy</title>
        <description>&lt;p&gt;本次介绍下怎么通过设置一个haproxy代理来上传到七牛云&lt;/p&gt;

&lt;p&gt;Dockerfile:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM haproxy:1.7
COPY haproxy-up.cfg /usr/local/etc/haproxy/haproxy.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们看下haproxy的配置文件 haproxy-up.cfg&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;global
    daemon
    maxconn 256

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms

frontend http-in
    bind *:80
    http-response add-header X-Up-Server %b/%s
    default_backend servers

backend servers
    http-request set-header Host up.qiniu.com
    timeout http-keep-alive 3000
    server svr-up up.qiniu.com:80
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后我们构建一个docker镜像：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$docker build . -t haproxy-up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后将该镜像推送到七牛：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$kirk images push haproxy-up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来我们我们在七牛将代理服务启动起来：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$kirk services run -i &quot;rwifeng/haproxy-up:latest&quot; haproxy-up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后创建一个公网ip映射到我们的代理服务：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$kirk maps set-port 61.153.154.165:80 --proto tcp -b &quot;default/haproxy-up&quot; --backend-port 80
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在一个完整的代理服务跑起来了， 接下来我们测试下，通过这个服务上传一个字符串到七牛：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -v 61.153.154.165 -F&quot;token=xozWSPMxkMjIVoHg2JyXq4-7-oJaEADLOKHVR0vU:nQcJ-8hxWl7gRB0W8b4GXEomi1M=:eyJzY29wZSI6Impzc2RrIiwiZGVhZGxpbmUiOjE0OTE2NTA5NDl9&quot; -F'file=abc'
* Rebuilt URL to: 61.153.154.165/
*   Trying 61.153.154.165...
* TCP_NODELAY set
* Connected to 61.153.154.165 (61.153.154.165) port 80 (#0)
&amp;gt; POST / HTTP/1.1
&amp;gt; Host: 61.153.154.165
&amp;gt; User-Agent: curl/7.52.1
&amp;gt; Accept: */*
&amp;gt; Content-Length: 358
&amp;gt; Expect: 100-continue
&amp;gt; Content-Type: multipart/form-data; boundary=------------------------1a7cb3f6d08dc5ee
&amp;gt;
&amp;lt; HTTP/1.1 100 Continue
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Access-Control-Allow-Headers: X-File-Name, X-File-Type, X-File-Size
&amp;lt; Access-Control-Allow-Methods: OPTIONS, HEAD, POST
&amp;lt; Access-Control-Allow-Origin: *
&amp;lt; Access-Control-Expose-Headers: X-Log, X-Reqid
&amp;lt; Access-Control-Max-Age: 2592000
&amp;lt; Cache-Control: no-store, no-cache, must-revalidate
&amp;lt; Content-Length: 76
&amp;lt; Content-Type: application/json
&amp;lt; Date: Sat, 08 Apr 2017 10:40:00 GMT
&amp;lt; Pragma: no-cache
&amp;lt; Server: nginx/1.10.2
&amp;lt; X-Content-Type-Options: nosniff
&amp;lt; X-From-Pod: 192.168.160.96
&amp;lt; X-Log: body;s.ph;s.put.tw;s.put.tr;s.put.tw;s.put.tr;s.ph;s.put.tw;s.put.tr;s.ph;PFDS;PFDS;PFDS:1;rs31_1.sel/not found;rdb.g;bs.r.39.224.43702764868;DBD;v4.get:1;rwro.ins:2/same entry;rs31_1.sel/not found;rdb.g:1;bs.r.39.224.43702764868;DBD:1;v4.get:1;rwro.get:2;MQ;RS.not:;RS:5;rs.put:12;rs-upload.putFile:14;UP:23;UP:24;audit-10.131.214.133:40
&amp;lt; X-Reqid: GgAAAE107P7zZbMU
&amp;lt; X-Reqid: GgAAAE107P7zZbMU
&amp;lt; X-Reqid: GgAAAE107P7zZbMU
&amp;lt; X-Up-Server: servers/svr-up
&amp;lt;
* Curl_http_done: called premature == 0
* Connection #0 to host 61.153.154.165 left intact
{&quot;hash&quot;:&quot;FqmZPjZHBoFquj4lcXhQwmyc0Nid&quot;,&quot;key&quot;:&quot;FqmZPjZHBoFquj4lcXhQwmyc0Nid&quot;}%
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;测试成功， 当然这个只是一个简单的demo， 你可以基于这个做很多事情。 或者自己制作其他更有意思的服务。&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/jekyll/update/2017/04/08/docker-haproxy/</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/update/2017/04/08/docker-haproxy/</guid>
      </item>
    
      <item>
        <title>dns 介绍</title>
        <description>&lt;p&gt;DNS(Domain Name System)是一个基于TCP/IP应用程序的分布式数据库， 他提供主机名字到ip地址之间的转换。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;结构&lt;/h3&gt;

&lt;h4 id=&quot;dns&quot;&gt;DNS的层次组织：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;QFNA  – Full Qualified Domain Name&lt;/li&gt;
  &lt;li&gt;xxx.in-addr.arpa&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;协议&lt;/h3&gt;

&lt;h4 id=&quot;dns-&quot;&gt;DNS 查询和响应的一般格式:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;dig 查询:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  dig www.qiniu.com

  ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.8.3-P1 &amp;lt;&amp;lt;&amp;gt;&amp;gt; www.qiniu.com
  ;; global options: +cmd
  ;; Got answer:
  ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 56934
  ;; flags: qr rd ra; QUERY: 1, ANSWER: 7, AUTHORITY: 0, ADDITIONAL: 0

  ;; QUESTION SECTION:
  ;www.qiniu.com.			IN	A

  ;; ANSWER SECTION:
  www.qiniu.com.		515	IN	CNAME	www.qiniu.com.wscdns.com.
  www.qiniu.com.wscdns.com. 515	IN	CNAME	qiniu.xdwscache.glb0.lxdns.com.
  qiniu.xdwscache.glb0.lxdns.com.	30 IN	A	218.92.227.121
  qiniu.xdwscache.glb0.lxdns.com.	30 IN	A	222.186.132.79
  qiniu.xdwscache.glb0.lxdns.com.	30 IN	A	58.222.19.61
  qiniu.xdwscache.glb0.lxdns.com.	30 IN	A	180.97.211.38
  qiniu.xdwscache.glb0.lxdns.com.	30 IN	A	58.221.78.105

  ;; Query time: 13 msec
  ;; SERVER: 114.114.114.114#53(114.114.114.114)
  ;; WHEN: Tue Jun  2 17:08:28 2015
  ;; MSG SIZE  rcvd: 187
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tcpdump &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo tcpdump -i all host 114.114.114.114&lt;/code&gt;包：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  17:08:28.438644 IP 192.168.200.178.61149 &amp;gt; public1.114dns.com.domain: 56934+ A? www.qiniu.com. (31)
  17:08:28.449578 IP public1.114dns.com.domain &amp;gt; 192.168.200.178.61149: 56934 7/0/0 CNAME www.qiniu.com.wscdns.com., CNAME qiniu.xdwscache.glb0.lxdns.com., A 218.92.227.121, A 222.186.132.79, A 58.222.19.61, A 180.97.211.38, A 58.221.78.105 (187)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 01 Jun 2015 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/jekyll/update/2015/06/01/dns-introduce/</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/update/2015/06/01/dns-introduce/</guid>
      </item>
    
      <item>
        <title>tcpflow 的简单应用</title>
        <description>&lt;p&gt;大家知道tcpdump 是一个很方便的抓包工具， 但是tcpdump是按照包为单位进行输出的，阅读起来不是很方便。  而tcpflow是面向tcp流的。 每个tcp传输会保存成一个文件，所以一个典型的tcp回话会产生两个文件，每个方向产生一个文件。 并且tcpflow还可以解析tcpdump保存的文件。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;安装&lt;/h3&gt;
&lt;p&gt;具体可以参考： &lt;a href=&quot;https://github.com/simsong/tcpflow&quot;&gt;tcpflow github&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;简单使用&lt;/h3&gt;

&lt;p&gt;具体的使用方法，可以去查应用手册&lt;code class=&quot;highlighter-rouge&quot;&gt;man tcpflow&lt;/code&gt;. 下面介绍几种简单的使用方法。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;打印经过网卡的所有报文&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在你的terminal中输入:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tcpflow -ci en0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中 -c 表示将报文直接打印在terminal中。不指定 -c 参数会将抓取的tcp报文保存在文件中。
-i 表示你要监听的网络端口。 假如你不指定-c 参数， tcpflow会将每个tcp流的数据存储在他自己的文件中，其中文件的命名规则你可以参考: &lt;a href=&quot;https://github.com/simsong/tcpflow&quot;&gt;tcpflow github&lt;/a&gt; . 基本格式为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[timestampT]sourceip.sourceport-destip.destport[--VLAN][cNNNN]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;读取已有的 pcap 文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在使用tcpdump， 或者 wireshark 抓得包的格式是&lt;code class=&quot;highlighter-rouge&quot;&gt;pcap&lt;/code&gt;。 使用tcpflow也可以读取这些包得格式。
这儿有一个我使用tcpdump 抓得包得格式： &lt;a href=&quot;http://rwxf.qiniudn.com/test.pcap&quot;&gt;tcpdump pcap&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tcpflow -cr test.pcap
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;即可以将 pcap 包，打印到terminal中。当然你也可以将tcp流保存在文件中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tcpflow -r test.pcap
 
这样我得到了两个文件：
183.136.139.016.00080-192.168.199.146.49570
192.168.199.146.49570-183.136.139.016.00080
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.199.146.49570-183.136.139.016.00080&lt;/code&gt; 是我主机向服务器发送的请求包。文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;183.136.139.016.00080-192.168.199.146.49570&lt;/code&gt;是服务器向客户端返回的响应包。如果你想要重放下请求，就可以使用这种方法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc -i 1 183.136.139.16 80 &amp;lt; 192.168.199.146.49570-183.136.139.016.00080
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;使用表达式过滤抓包&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;tcpflow 也是支持表达式过滤的，格式和tcpdump一样，具体格式和对应参数你可以参考&lt;a href=&quot;http://linux.die.net/man/7/pcap-filter&quot;&gt;filter expression&lt;/a&gt; 。 这里列集中常用的表达式：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;过滤经过 192.168.1.202 的流量：
tcpflow -i any host 10.0.3.1

过滤从主机 192.168.1.202 发出的流量：
tcpflow -i any src host 10.0.3.1

过滤从主机 192.168.1.202 发出的流量并且端口号为 80：
tcpflow -i any src host 10.0.3.1 and port 80

过滤固定端口的流量：
tcpflow -i en0 port 443 or port 80

过滤主机 192.168.1.202 端口为80或443的流量：
tcpflow -i en0 'host 192.168.1.202 and (port 443 or port 80)'

...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 16 Apr 2015 18:07:27 +0800</pubDate>
        <link>http://localhost:4000/jekyll/update/2015/04/16/how-to-tcpflow/</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/update/2015/04/16/how-to-tcpflow/</guid>
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 21 Jun 2014 20:07:27 +0800</pubDate>
        <link>http://localhost:4000/jekyll/update/2014/06/21/welcome-to-jekyll/</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/update/2014/06/21/welcome-to-jekyll/</guid>
      </item>
    
  </channel>
</rss>
